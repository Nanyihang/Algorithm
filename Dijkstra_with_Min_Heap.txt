//HW3  Due: Friday (10/5) at 11:59PM
//Dijkstra's algorithm 
//Implemented with min-Heap
//Time Complexity O((N + E ) log N)
#include <iostream>
#include <vector>
#include <list>
#include <fstream>
using namespace std;
class e_node { //stands for edge node
public:
	int nb;//the neighbor of a currently considered node
	int weight; //weight of the edge to the above neighbor
	e_node() {}//constructor
};
class rt_node { //rt stands for routing table
public:
	int cost;  //cost to a node
	int from;  //the from node to this node
	int checked;
	int h_pos; //the postion in heap for this node
	rt_node() { from = -1;  cost = 9999;  checked = 0; }
};
class h_node { //stands for heap_node
public:
	int id;
	int cost;
	h_node() { id = -1; cost = 9999; }
	h_node(int i, int j) { id = i; cost = j; }
	bool operator<(h_node h) { return (cost < h.cost); }
};

void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start); //minheap
void select_node(vector<list<e_node> > & graph, vector<rt_node> & rt, vector<h_node> &heap);
void neighbor_update(vector<list<e_node> > & graph, vector<rt_node> & rt, vector<h_node> & heap, int &s);
//void heap_down_node(vector<h_node> &heap, int j);
//void heap_up_node(vector<h_node> &heap, int j);
//void heap_node(vector<h_node> &heap);
//void del_node(vector<h_node> & heap);
int main() {
	//Do not change code for main function
	ifstream in("text1.txt");
	int start;
	in >> start;  //start is the source node for the algorithm
	int n, e; //n: num of nodes ; e: num of edges
	in >> n >> e;
	list<e_node> le;
	vector<list<e_node> > graph(n, le);
	e_node e1;
	int n1, n2, w;
	for (int i = 0; i < e; i++) {
		in >> n1 >> n2 >> w;
		e1.nb = n2;
		e1.weight = w;
		graph[n1].push_back(e1);
	}
	in.close();
	vector<rt_node> rt(n); //rt stands for routing table
	vector<h_node> heap(n);

	set_up(rt, heap, start);//initialize values
	select_node(graph, rt, heap);

	/*for (int i = 0; i < n; i++) {

		cout << "cost from " << start << " to " << i << " is: " << rt[i].cost << "  from node is " << rt[i].from << endl;
	}*/
	getchar();
	getchar();
	return 0;
}

void set_up(vector<rt_node> &rt, vector<h_node> &heap, int &start) 
{
	for(int i = 0; i < rt.size(); i++ )
	{	if(i == start)
		{
			rt[i].cost= 0;
			rt[i].from=start;
			rt[i].checked=1;
			rt[i].h_pos=1;
		}
		else
		{
			rt[i].cost=9999;
			rt[i].from=-1;
			rt[i].checked=0;
			rt[i].h_pos=-1;
		}
	}
//Initialization values as you see fit
}


void neighbor_update(vector<list<e_node> > & graph, vector<rt_node> & rt, vector<h_node> & heap, int &s)
{
	//this function is to be invoked by select_node
	//If this code gets too long, you can move some part of it out side and form a separate function.

}

void select_node(vector<list<e_node> > & graph, vector<rt_node> & rt, vector<h_node> & heap)
{
	//Continue to select an unvisited node with minimum cost, and doing some general update
	//Invoke neighbor_udpate to possibly update neighbors
	int select_node_start=0;
	int sum_path=0;
	h_node find_minnode;
	int count = 1;
	for(int i = 0 ; i < rt.size(); i++)
	{
		if(rt[i].checked == 1) 
			select_node_start = i;
	}
	auto ptr = graph[select_node_start].begin();
	while (ptr != graph[select_node_start].end()) //find min value for next node for start node
	{
			h_node minin;
			minin.id= (*ptr).nb;
			minin.cost=(*ptr).weight;
			if (rt[minin.id].checked != 1 && find_minnode.cost > minin.cost)
			{			
				find_minnode.id = minin.id;
				find_minnode.cost = minin.cost;
			}
			++ptr;
	}
	if(find_minnode.id == -1)
	{
		cout << "only start node" << endl;
	}
	else
	{
		rt[find_minnode.id].cost = find_minnode.cost;
		rt[find_minnode.id].from = select_node_start;
	}
	while( count != 5 ) // find rest node with mini
	{	
		int mark_pos = find_minnode.id;
		auto ptr_current_node = graph[mark_pos].begin();
		//ptr_current_node = graph[find_minnode.id].begin();
		while( ptr_current_node != graph[mark_pos].end())
		{
			h_node minin;
			minin.id =(*ptr_current_node).nb;
			minin.cost=(*ptr_current_node).weight;
			if( rt[minin.id].checked != 1 && find_minnode.cost >= minin.cost)
			{
				find_minnode.id = minin.id;
				find_minnode.cost = minin.cost;
			} 
			ptr_current_node++;
		}
		if(find_minnode.id == mark_pos) 
		{
			cout << "there is less loop here, go back to the last" << endl;
			find_minnode.id = rt[find_minnode.id].from;
			find_minnode.cost =rt[find_minnode.id].cost;
			rt[mark_pos].checked = 1;
		}
		else
		{
			rt[find_minnode.id].cost = find_minnode.cost;
			rt[find_minnode.id].from = mark_pos;
			rt[find_minnode.id].checked = 1;
			count += 1;
		}
	}
	for (int i =0 ; i< rt.size(); i++)
	{	if(i != select_node_start)
		{
		cout <<i <<" "<< rt[i].from <<" "<< rt[i].cost <<endl;
		sum_path += rt[i].cost;
		}
	}
	cout << "The overall cost is "<< sum_path<<"."<<endl;
	//If this code gets too long, you can move some part of it out side and form a separate function.

}

/*
//sample screenshot
cost from 0 to 0 is: 0  from node is 0
cost from 0 to 1 is : 7  from node is 2
cost from 0 to 2 is : 4  from node is 0
cost from 0 to 3 is : 10  from node is 1
cost from 0 to 4 is : 14  from node is 3
cost from 0 to 5 is : 9  from node is 1
*/

/*
//sample input file text1.txt
0
6
12
0 5 16
0 4 15
0 2 4
0 3 12
0 1 9
1 3 3
1 5 2
2 3 14
2 1 3
3 4 4
4 5 1
5 3 2
*/
